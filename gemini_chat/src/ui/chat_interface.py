"""Interface de chat avec gestion des entr√©es et interruptions"""

from pathlib import Path
import sys
import signal
import asyncio
from typing import Optional, Callable, Any
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
from rich.markdown import Markdown

from ..utils.config import Config
from ..clients.gemini_client import GeminiClient, DuplicateFileError
from ..clients.perplexity_client import PerplexityClient
from ..tools.perplexity_tool import PerplexityTool
from ..models.citation import CitationManager
from ..models.message import MessageRole
from ..utils.history import ChatHistory
from ..ui.file_manager import FileManager


class ChatInterface:
    """Interface de chat avec gestion avanc√©e des entr√©es et des co√ªts"""
    
    def __init__(self, config: Config):
        self.config = config
        self.console = Console()
        self.interrupted = False
        
        # Clients et outils
        self.gemini_client = GeminiClient(config)
        self.perplexity_client = PerplexityClient(config) if config.has_perplexity else None
        self.citation_manager = CitationManager()
        self.history = ChatHistory(config)
        self.file_manager = FileManager()
        
        # Stocker perplexity_tool comme attribut d'instance
        self.perplexity_tool = None
        
        # Configuration de l'interruption
        self._setup_signal_handlers()
        
        # Initialiser le chat
        self._initialize_chat()
    
    def _setup_signal_handlers(self):
        """Configure les gestionnaires de signaux pour l'interruption"""
        def signal_handler(sig, frame):
            self.interrupted = True
            self.console.print("\nüõë Interruption d√©tect√©e...", style="yellow")
        
        signal.signal(signal.SIGINT, signal_handler)
    
    def _initialize_chat(self):
        """Initialise le chat Gemini avec les outils"""
        tools = None
        if self.perplexity_client:
            self.perplexity_tool = PerplexityTool(self.perplexity_client, self.citation_manager)
            tools = [self.perplexity_tool.get_tool_config()]
        
        self.gemini_client.initialize_chat(tools)
    

    def _simple_input(self) -> Optional[str]:
        """Entr√©e simple avec une seule ligne"""
        try:
            return Prompt.ask("üí¨ Votre message")
        except KeyboardInterrupt:
            self.interrupted = True
            return None
    
    def _display_message(self, content: str, role: str = "assistant"):
        """Affiche un message format√©"""
        style = "blue" if role == "user" else "green"
        emoji = "üë§" if role == "user" else "ü§ñ"
        
        panel = Panel(
            Markdown(content),
            title=f"{emoji} {role.title()}",
            border_style=style
        )
        self.console.print(panel)
    
    def _stream_response(self, message: str) -> str:
        """Affiche une r√©ponse en streaming avec calcul du co√ªt total"""
        full_response = ""
        direct_search_completed = False
        
        # Variables pour tracking des co√ªts
        gemini_cost = 0.0
        perplexity_total_cost = 0.0
        
        # R√©initialiser le tracking des co√ªts de Perplexity
        if self.perplexity_tool:
            self.perplexity_tool.reset_cost_tracking()
        
        try:
            self.console.print("ü§ñ Gemini:", style="green bold")
            
            for chunk in self.gemini_client.send_message_stream(message):
                if self.interrupted:
                    self.console.print("\nüõë R√©ponse interrompue", style="yellow")
                    break
                
                # Extraire le co√ªt Gemini
                if chunk.startswith("GEMINI_TOTAL_PRICE :"):
                    try:
                        gemini_cost = float(chunk.split(":")[1].strip().replace("$", ""))
                    except:
                        pass
                
                # V√©rifier si c'est un function call
                if chunk.startswith("FUNCTION_CALL:"):
                    parts = chunk.split(":", 2)
                    if len(parts) == 3:
                        tool_name = parts[1]
                        query = parts[2]
                        
                        if tool_name == "perplexity_direct_search":
                            # RECHERCHE DIRECTE - R√©ponse finale √† l'utilisateur
                            if self.perplexity_client and self.perplexity_tool:
                                try:
                                    self.console.print(f"\nüîç Recherche directe : {query}", style="cyan bold")
                                    search_result = self.perplexity_client.search(query)
                                    self.citation_manager.add_search_result(search_result)
                                    
                                    # Ajouter le co√ªt de cette recherche
                                    perplexity_total_cost += search_result.total_cost
                                    
                                    # Afficher les citations
                                    if search_result.citations:
                                        self.console.print("\nüìö Sources :", style="cyan bold")
                                        for citation in search_result.citations:
                                            self.console.print(f"  {citation}", style="cyan")
                                    
                                    # Ajouter le contenu complet au contexte Gemini
                                    context_message = (
                                        f"[RECHERCHE DIRECTE] Question de l'utilisateur: {query}\n\n"
                                        f"R√©ponse Perplexity fournie √† l'utilisateur:\n{search_result.content}\n\n"
                                        f"Sources utilis√©es: {[c.url for c in search_result.citations]}\n\n"
                                        f"[Cette information compl√®te est maintenant disponible dans ton contexte "
                                        f"pour enrichir tes prochaines r√©ponses et r√©pondre aux questions de suivi]"
                                    )
                                    self.gemini_client.send_message(context_message)
                                    
                                    full_response = f"[Recherche directe: {query}]\n{search_result.content}"
                                    direct_search_completed = True
                                    
                                    # Arr√™ter le streaming car la r√©ponse finale est donn√©e
                                    break
                                    
                                except Exception as e:
                                    error_msg = f"‚ùå Erreur lors de la recherche directe: {e}"
                                    self.console.print(error_msg, style="red")
                                    full_response += error_msg
                        
                        elif tool_name == "perplexity_help_search":
                            # RECHERCHE D'AIDE - Informations pour Gemini
                            if self.perplexity_client and self.perplexity_tool:
                                try:
                                    self.console.print(f"\nüîç Recherche d'informations compl√©mentaires : {query}", style="cyan")
                                    search_result = self.perplexity_client.search(query)
                                    self.citation_manager.add_search_result(search_result)
                                    
                                    # Ajouter le co√ªt de cette recherche
                                    perplexity_total_cost += search_result.total_cost
                                    
                                    # Ajouter au contexte Gemini SILENCIEUSEMENT
                                    context_message = (
                                        f"[INFORMATIONS COMPL√âMENTAIRES] Recherche: {query}\n\n"
                                        f"R√©sultats trouv√©s:\n{search_result.content}\n\n"
                                        f"Sources: {[c.url for c in search_result.citations]}\n\n"
                                        f"[Utilise ces informations pour enrichir ta r√©ponse initiale]"
                                    )
                                    self.gemini_client.send_message(context_message)
                                    
                                    self.console.print(f"‚úÖ Informations ajout√©es au contexte", style="green")
                                    full_response += f"[Recherche d'aide effectu√©e: {query}]"
                                    
                                    # Relancer le streaming pour que Gemini synth√©tise
                                    self.console.print("\nü§ñ Synth√®se avec les informations trouv√©es :", style="green bold")
                                    
                                    synthesis_prompt = "Maintenant, r√©ponds √† la question initiale en utilisant les informations compl√©mentaires."
                                    
                                    for synthesis_chunk in self.gemini_client.send_message_stream(synthesis_prompt):
                                        if self.interrupted:
                                            break
                                        
                                        # Extraire le co√ªt Gemini de la synth√®se aussi
                                        if synthesis_chunk.startswith("GEMINI_TOTAL_PRICE :"):
                                            try:
                                                synthesis_cost = float(synthesis_chunk.split(":")[1].strip().replace("$", ""))
                                                gemini_cost += synthesis_cost
                                            except:
                                                pass
                                        
                                        # Ignorer les m√©tadonn√©es pour la synth√®se
                                        if not synthesis_chunk.startswith(("GEMINI_", "FUNCTION_CALL:")):
                                            self.console.print(synthesis_chunk, end="")
                                            full_response += synthesis_chunk
                                    
                                except Exception as e:
                                    error_msg = f"‚ùå Erreur lors de la recherche d'aide: {e}"
                                    self.console.print(error_msg, style="red")
                                    full_response += error_msg
                        
                        elif tool_name == "FUNCTION_CALL_UNKNOWN":
                            # Function call non reconnu
                            self.console.print(f"‚ö†Ô∏è Outil non reconnu: {query}", style="yellow")
                            
                else:
                    # Gestion de l'affichage des informations de tokens et prix
                    if chunk.startswith("GEMINI_PROMPT_TOKENS"):
                        self.console.print(f"\n{chunk.strip()}", style="dim")
                    elif chunk.startswith("GEMINI_OUTPUT_TOKENS"):
                        self.console.print(f"{chunk.strip()}", style="dim")
                    elif chunk.startswith("GEMINI_TOTAL_INPUT_PRICE"):
                        self.console.print(f"{chunk.strip()}", style="dim")
                    elif chunk.startswith("GEMINI_TOTAL_OUTPUT_PRICE"):
                        self.console.print(f"{chunk.strip()}", style="dim")
                    elif chunk.startswith("GEMINI_TOTAL_PRICE"):
                        self.console.print(f"{chunk.strip()}", style="cyan bold")
                    else:
                        # Affichage normal du streaming (seulement si pas de recherche directe)
                        if not direct_search_completed and chunk and not chunk.startswith(("GEMINI_", "FUNCTION_CALL:")):
                            self.console.print(chunk, end="")
                            full_response += chunk
            
            # Nouvelle ligne √† la fin si streaming normal
            if not direct_search_completed and not full_response.startswith("[Recherche"):
                self.console.print()
            
            # Afficher les citations de help_search apr√®s la r√©ponse de Gemini
            if not direct_search_completed and "[Recherche d'aide effectu√©e:" in full_response:
                latest_citations = self.citation_manager.get_latest_citations()
                if latest_citations:
                    self.console.print("\nüìö Sources utilis√©es :", style="cyan bold")
                    for citation in latest_citations:
                        self.console.print(f"  {citation}", style="cyan")
            
            # AFFICHER LE CO√õT TOTAL COMBIN√â
            total_cost = gemini_cost + perplexity_total_cost
            if total_cost > 0:
                self.console.print("\n" + "="*50, style="cyan")
                self.console.print("üí∞ CO√õT TOTAL DE L'INTERACTION", style="cyan bold")
                self.console.print("="*50, style="cyan")
                if gemini_cost > 0:
                    self.console.print(f"ü§ñ Gemini: {gemini_cost:.6f}$", style="cyan")
                if perplexity_total_cost > 0:
                    self.console.print(f"üîç Perplexity: {perplexity_total_cost:.6f}$", style="cyan")
                self.console.print(f"üìä TOTAL: {total_cost:.6f}$", style="cyan bold")
                self.console.print("="*50, style="cyan")
            
            return full_response
            
        except Exception as e:
            error_msg = f"‚ùå Erreur lors de la g√©n√©ration: {e}"
            self.console.print(error_msg, style="red")
            return error_msg
                
    def _handle_command(self, command: str) -> bool:
        """G√®re les commandes sp√©ciales. Retourne True si c'est une commande."""
        if not command.startswith("/"):
            return False
        
        parts = command.split(maxsplit=1)
        cmd = parts[0].lower()
        args = parts[1] if len(parts) > 1 else ""
        
        try:
            if cmd == "/upload":
                self._handle_upload_command(args)
            elif cmd == "/list":
                self._handle_list_command()
            elif cmd == "/remove":
                self._handle_remove_command(args)
            elif cmd == "/clear":
                self._handle_clear_command()
            elif cmd == "/history":
                self._handle_history_command(args)
            elif cmd == "/search":
                self._handle_search_command(args)
            elif cmd == "/citations":
                self._handle_citations_command()
            elif cmd == "/costs":  # Nouvelle commande pour voir l'historique des co√ªts
                self._handle_costs_command()
            elif cmd == "/help":
                self._handle_help_command()
            elif cmd in ["/quit", "/exit", "/q"]:
                return self._handle_quit_command()
            else:
                self.console.print(f"‚ùì Commande inconnue: {cmd}", style="yellow")
                self.console.print("Tapez /help pour voir les commandes disponibles")
        
        except Exception as e:
            self.console.print(f"‚ùå Erreur lors de l'ex√©cution de la commande: {e}", style="red")
        
        return True
    
    def _handle_upload_command(self, args: str):
        """G√®re la commande /upload avec gestion des doublons"""
        if args:
            # Upload direct par chemin
            file_path = Path(args)
            if self.file_manager.validate_pdf_file(file_path):
                try:
                    file_info = self.gemini_client.upload_file(file_path)
                    self.console.print(f"‚úÖ Fichier '{file_info['name']}' upload√©", style="green")
                except DuplicateFileError as e:
                    self.console.print(f"‚ö†Ô∏è {e}", style="yellow")
                    self.console.print("üí° Utilisez /list pour voir les fichiers d√©j√† upload√©s", style="cyan")
                except Exception as e:
                    self.console.print(f"‚ùå Erreur lors de l'upload: {e}", style="red")
            else:
                self.console.print(f"‚ùå Fichier invalide: {file_path}", style="red")
        else:
            # S√©lection graphique
            try:
                file_path = self.file_manager.select_single_file()
                if file_path:
                    try:
                        file_info = self.gemini_client.upload_file(file_path)
                        self.console.print(f"‚úÖ Fichier '{file_info['name']}' upload√©", style="green")
                    except DuplicateFileError as e:
                        self.console.print(f"‚ö†Ô∏è {e}", style="yellow")
                        self.console.print("üí° Utilisez /list pour voir les fichiers d√©j√† upload√©s", style="cyan")
                else:
                    self.console.print("Aucun fichier s√©lectionn√©", style="yellow")
            except Exception as e:
                self.console.print(f"‚ùå Erreur lors de la s√©lection: {e}", style="red")
    
    def _handle_list_command(self):
        """G√®re la commande /list avec affichage des chemins"""
        files = self.gemini_client.get_files_info()
        if not files:
            self.console.print("üìã Aucun fichier upload√©", style="yellow")
            return
        
        self.console.print("üìã Fichiers upload√©s:", style="cyan bold")
        for i, file_info in enumerate(files, 1):
            size_mb = file_info['size'] / (1024 * 1024)
            # Afficher le chemin pour aider l'utilisateur √† identifier les fichiers
            self.console.print(f"  {i}. {file_info['name']} ({size_mb:.1f} MB)")
            self.console.print(f"     üìÅ {file_info['path']}", style="dim")
    
    def _handle_remove_command(self, args: str):
        """G√®re la commande /remove"""
        if not args:
            self.console.print("Usage: /remove <index>", style="yellow")
            return
        
        try:
            index = int(args) - 1
            if self.gemini_client.remove_file(index):
                self.console.print(f"‚úÖ Fichier #{index + 1} supprim√©", style="green")
            else:
                self.console.print(f"‚ùå Index invalide: {index + 1}", style="red")
        except ValueError:
            self.console.print("‚ùå Index invalide (doit √™tre un nombre)", style="red")
    
    def _handle_clear_command(self):
        """G√®re la commande /clear"""
        self.gemini_client.clear_files()
        self.console.print("üóëÔ∏è Tous les fichiers ont √©t√© supprim√©s", style="green")
    
    def _handle_history_command(self, args: str):
        """G√®re la commande /history"""
        if not args:
            history_text = self.history.format_for_display()
            self.console.print(history_text)
        elif args == "clear":
            self.history.clear()
            self.console.print("üóëÔ∏è Historique effac√©", style="green")
        elif args.startswith("save"):
            filename = args.split(maxsplit=1)[1] if " " in args else None
            result = self.history.save_to_file(filename)
            self.console.print(result)
        elif args.isdigit():
            limit = int(args)
            history_text = self.history.format_for_display(limit)
            self.console.print(history_text)
        else:
            self.console.print("Usage: /history [clear|save [filename]|<number>]", style="yellow")
    
    def _handle_search_command(self, args: str):
        """G√®re la commande /search"""
        if not self.perplexity_client:
            self.console.print("‚ùå Recherche non disponible (PERPLEXITY_API_KEY manquante)", style="red")
            return
        
        if not args:
            query = Prompt.ask("üîç Requ√™te de recherche")
        else:
            query = args
        
        if query:
            try:
                self.console.print(f"üîç Recherche: {query}", style="cyan")
                result = self.perplexity_client.search(query)
                
                # Ajouter aux citations
                self.citation_manager.add_search_result(result)
                
                # Afficher les sources UNE SEULE FOIS
                if result.citations:
                    self.console.print("üìö Sources:", style="cyan bold")
                    for citation in result.citations:
                        self.console.print(f"  {citation}")
                
                # Ajouter au contexte Gemini silencieusement
                context_message = f"[CONTEXTE INTERNE] Recherche manuelle effectu√©e: {query}\n\nR√©sultats:\n{result.content}\n\n[Ces informations sont maintenant disponibles pour tes prochaines r√©ponses]"
                self.gemini_client.send_message(context_message)
                
                self.console.print(f"\n‚úÖ Recherche ajout√©e au contexte Gemini", style="green")
                
            except Exception as e:
                self.console.print(f"‚ùå Erreur lors de la recherche: {e}", style="red")

    def _handle_costs_command(self):
        """G√®re la commande /costs - affiche l'historique des co√ªts par recherche"""
        search_results = self.citation_manager.get_all_search_results()
        if not search_results:
            self.console.print("üí∞ Aucun co√ªt de recherche enregistr√©", style="yellow")
            return
        
        total_cost = sum(result.total_cost for result in search_results)
        
        self.console.print("üí∞ Historique des co√ªts de recherche Perplexity:", style="cyan bold")
        self.console.print("="*60, style="cyan")
        
        for i, result in enumerate(search_results, 1):
            self.console.print(f"{i}. {result.query[:50]}{'...' if len(result.query) > 50 else ''}")
            self.console.print(f"   üìÖ {result.timestamp.strftime('%H:%M:%S')} | üí∞ {result.total_cost:.6f}$")
            self.console.print(f"   üìä Tokens: {result.input_tokens}‚Üí{result.output_tokens} ({result.total_tokens} total)")
            self.console.print()
        
        self.console.print("="*60, style="cyan")
        self.console.print(f"üí∞ TOTAL PERPLEXITY: {total_cost:.6f}$", style="cyan bold")
        self.console.print("="*60, style="cyan")

    def _handle_citations_command(self):
        """G√®re la commande /citations - affiche par interaction avec co√ªts"""
        citations_text = self.citation_manager.format_citations_by_interaction()
        self.console.print(citations_text)

    def _handle_help_command(self):
        """Affiche l'aide"""
        help_text = """
üìö Commandes disponibles:
  /upload [chemin]    - Upload un fichier PDF
  /list              - Liste les fichiers upload√©s
  /remove <index>    - Supprime un fichier
  /clear             - Supprime tous les fichiers
  /history           - Affiche l'historique
  /history clear     - Efface l'historique
  /history save      - Sauvegarde l'historique
  /search <requ√™te>  - Recherche avec Perplexity
  /citations         - Affiche les citations avec co√ªts
  /costs             - Affiche l'historique des co√ªts Perplexity
  /help              - Affiche cette aide
  /quit, /exit, /q   - Quitter

üí° Conseils:
  - Utilisez Ctrl+C pour interrompre une r√©ponse
  - Les PDFs upload√©s restent en contexte
  - L'historique est sauvegard√© automatiquement
  - Le co√ªt total (Gemini + Perplexity) s'affiche apr√®s chaque interaction
  
üîç Recherche automatique:
  - Questions sans document ‚Üí Recherche directe
  - Questions sur document ‚Üí Recherche d'aide pour enrichir l'analyse
        """
        self.console.print(Panel(help_text, title="Aide", border_style="blue"))
    
    def _handle_quit_command(self) -> bool:
        """G√®re la commande /quit"""
        self.console.print("üëã Au revoir !", style="cyan")
        return True
    
    def run(self):
        """Lance l'interface de chat"""
        # V√©rifier la configuration
        errors = self.config.validate()
        if any("GEMINI_API_KEY" in error for error in errors):
            self.console.print("‚ùå GEMINI_API_KEY manquante", style="red")
            return
        
        if not self.config.has_perplexity:
            self.console.print("‚ö†Ô∏è Recherche Perplexity d√©sactiv√©e (cl√© API manquante)", style="yellow")
        
        # Message de bienvenue
        welcome_panel = Panel(
            "ü§ñ Chat Gemini avec support PDF et recherche Perplexity\n"
            "Tapez /help pour voir les commandes disponibles\n"
            "Utilisez Ctrl+C pour interrompre une r√©ponse\n\n"
            "üîç Recherche intelligente:\n"
            "‚Ä¢ Questions g√©n√©rales ‚Üí Recherche directe Perplexity\n"
            "‚Ä¢ Questions sur documents ‚Üí Recherche d'aide + analyse Gemini\n\n"
            "üí∞ Le co√ªt total (Gemini + Perplexity) s'affiche apr√®s chaque interaction",
            title="Bienvenue",
            border_style="green"
        )
        self.console.print(welcome_panel)
        
        # Boucle principale
        while not self.interrupted:
            try:
                # R√©initialiser l'√©tat d'interruption
                self.interrupted = False
                
                # Obtenir l'entr√©e utilisateur
                user_input = self._simple_input()
                
                if user_input is None or self.interrupted:
                    continue
                
                user_input = user_input.strip()
                if not user_input:
                    continue
                
                # V√©rifier si c'est une commande
                if self._handle_command(user_input):
                    if user_input.lower() in ["/quit", "/exit", "/q"]:
                        break
                    continue
                
                # Ajouter √† l'historique
                self.history.add_message(MessageRole.USER, user_input)
                
                # Traiter le message
                response = self._stream_response(user_input)
                
                if response and not self.interrupted:
                    # Ajouter √† l'historique
                    self.history.add_message(MessageRole.ASSISTANT, response)
                    
            
            except KeyboardInterrupt:
                self.interrupted = True
                self.console.print("\nüõë Utilisation interrompue", style="yellow")
                
                try:
                    choice = Prompt.ask("Voulez-vous quitter ? (o/N)", default="N")
                    if choice.lower() in ['o', 'oui', 'y', 'yes']:
                        break
                except KeyboardInterrupt:
                    break
            
            except Exception as e:
                self.console.print(f"‚ùå Erreur inattendue: {e}", style="red")